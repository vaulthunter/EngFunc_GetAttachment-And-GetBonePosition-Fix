/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <xs>

#define PLUGIN "getattachment and boneplacement fix"
#define VERSION "1.0"
#define AUTHOR "GlobalModders.net"

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	wtf3();
	set_task(0.1, "cycle", _, _, 0, "b");
}

new g_cycler = 0;
new beamsprite;

wtf3(){
	g_cycler = create_entity("cycler");
	entity_set_origin(g_cycler, Float:{0.0, 0.0, 48.0});
	entity_set_model(g_cycler, "models/player/vip/vip.mdl");
	entity_set_float(g_cycler, EV_FL_framerate, 1.0);
	entity_set_float(g_cycler, EV_FL_renderamt, 50.0);
	
	entity_set_int(g_cycler, EV_INT_rendermode, 5);
	DispatchSpawn(g_cycler);
	entity_set_int(g_cycler, EV_INT_movetype, 8);
	entity_set_vector(g_cycler, EV_VEC_avelocity, Float:{20.0, 30.0, 10.0});
}

FixAngles(Float:point[3], Float:origin[3], Float:angles[3]){
	point[0] -= origin[0];
	point[1] -= origin[1];
	
	new Float:x, Float:y, Float:c, Float:s;
	
	x = point[0];
	y = point[1];
	c = floatcos(angles[1], degrees);
	s = floatsin(angles[1], degrees);
	point[0] = x * c - y * s;
	point[1] = y * c + x * s;
	
	point[0] += origin[0];
	point[1] += origin[1];
}

public GetBonePosition(entity, bone, Float:position[3]){
	static Float:origin[3], Float:angles[3];
	entity_get_vector(entity, EV_VEC_angles, angles);
	angles[0] = -angles[0];
	entity_set_vector(entity, EV_VEC_angles, angles);
	//entity_set_float(entity, EV_FL_animtime, random_float(0.0, 100.0));
	engfunc(EngFunc_GetBonePosition, entity, bone, position, 0);
	//entity_set_float(entity, EV_FL_animtime, 0.0);
	angles[0] = -angles[0];
	entity_set_vector(entity, EV_VEC_angles, angles);
	entity_get_vector(entity, EV_VEC_origin, origin);
	FixAngles(position, origin, angles);
}

public GetAttachment(entity, attachment, Float:position[3]){
	static Float:origin[3], Float:angles[3];
	engfunc(EngFunc_GetAttachment, entity, attachment, position, 0);
	entity_get_vector(entity, EV_VEC_angles, angles);
	entity_get_vector(entity, EV_VEC_origin, origin);
	FixAngles(position, origin, angles);
}

public draw_att(attachment, bone){
	new Float:origins[2][3];
	GetAttachment( g_cycler, attachment, origins[0]);
	GetBonePosition( g_cycler, bone, origins[1]);
	message_begin(MSG_ALL ,SVC_TEMPENTITY)
	write_byte(TE_BEAMPOINTS)
	write_coord(floatround(origins[0][0]))	// start position
	write_coord(floatround(origins[0][1]))
	write_coord(floatround(origins[0][2]))
	write_coord(floatround(origins[1][0]))	// end position
	write_coord(floatround(origins[1][1]))
	write_coord(floatround(origins[1][2]))
	write_short(beamsprite)	// sprite index
	write_byte(0)	// starting frame
	write_byte(0)	// frame rate in 0.1's
	write_byte(1)	// life in 0.1's
	write_byte(10)	// line width in 0.1's
	write_byte(1)	// noise amplitude in 0.01's
	write_byte(0)	// Red
	write_byte(0)	// Green
	write_byte(255)	// Blue
	write_byte(255)	// brightness
	write_byte(0)	// scroll speed in 0.1's
	message_end()
}

public draw_bones(b1,b2){
	new Float:origins[2][3];
	GetBonePosition( g_cycler, b1, origins[0]);
	GetBonePosition( g_cycler, b2, origins[1]);
	message_begin(MSG_ALL ,SVC_TEMPENTITY)
	write_byte(TE_BEAMPOINTS)
	write_coord(floatround(origins[0][0]))	// start position
	write_coord(floatround(origins[0][1]))
	write_coord(floatround(origins[0][2]))
	write_coord(floatround(origins[1][0]))	// end position
	write_coord(floatround(origins[1][1]))
	write_coord(floatround(origins[1][2]))
	write_short(beamsprite)	// sprite index
	write_byte(0)	// starting frame
	write_byte(0)	// frame rate in 0.1's
	write_byte(1)	// life in 0.1's
	write_byte(5)	// line width in 0.1's
	write_byte(1)	// noise amplitude in 0.01's
	write_byte(255)	// Red
	write_byte(0)	// Green
	write_byte(0)	// Blue
	write_byte(255)	// brightness
	write_byte(0)	// scroll speed in 0.1's
	message_end()
}

public cycle(){
	if(!g_cycler)
		return;
		
	draw_att(0, 27);
	draw_att(1, 12);
		
	draw_bones(1, 0);
	draw_bones(2, 1);
	draw_bones(3, 2);
	draw_bones(4, 3);
	draw_bones(5, 4);
	draw_bones(6, 5);
	draw_bones(7, 6);
	draw_bones(8, 7);
	draw_bones(9, 6);
	draw_bones(10, 9);
	draw_bones(11, 10);
	draw_bones(12, 11);
	draw_bones(13, 12);
	draw_bones(14, 13);
	draw_bones(15, 12);
	draw_bones(16, 15);
	draw_bones(17, 15);
	draw_bones(18, 11);
	draw_bones(19, 11);
	draw_bones(20, 10);
	draw_bones(21, 10);
	draw_bones(22, 9);
	draw_bones(23, 9);
	draw_bones(24, 6);
	draw_bones(25, 24);
	draw_bones(26, 25);
	draw_bones(27, 26);
	draw_bones(28, 27);
	draw_bones(29, 28);
	draw_bones(30, 27);
	draw_bones(31, 30);
	draw_bones(32, 30);
	draw_bones(33, 26);
	draw_bones(34, 26);
	draw_bones(35, 25);
	draw_bones(36, 25);
	draw_bones(37, 24);
	draw_bones(38, 24);
	draw_bones(39, 5);
	draw_bones(40, 1);
	draw_bones(41, 1);
	draw_bones(42, 1);
	draw_bones(43, 42);
	draw_bones(44, 43);
	draw_bones(45, 44);
	draw_bones(46, 43);
	draw_bones(47, 42);
	draw_bones(48, 1);
	draw_bones(49, 48);
	draw_bones(50, 49);
	draw_bones(51, 50);
	draw_bones(52, 49);
}

public plugin_precache() {
	precache_model("models/player/vip/vip.mdl");
	beamsprite = precache_model("sprites/laserbeam.spr");
}